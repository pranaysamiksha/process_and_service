//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace process_pousse.pms_process {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="processSoap", Namespace="http://tempuri.org/")]
    public partial class process : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback getActiveCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback Addprocess_masterOperationCompleted;
        
        private System.Threading.SendOrPostCallback Addbrowser_historyOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertErrorlogOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public process() {
            this.Url = global::process_pousse.Properties.Settings.Default.process_pousse_pms_process_process;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event getActiveCountCompletedEventHandler getActiveCountCompleted;
        
        /// <remarks/>
        public event Addprocess_masterCompletedEventHandler Addprocess_masterCompleted;
        
        /// <remarks/>
        public event Addbrowser_historyCompletedEventHandler Addbrowser_historyCompleted;
        
        /// <remarks/>
        public event convertImageCompletedEventHandler convertImageCompleted;
        
        /// <remarks/>
        public event insertErrorlogCompletedEventHandler insertErrorlogCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getActiveCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getActiveCount(int user_masterID) {
            object[] results = this.Invoke("getActiveCount", new object[] {
                        user_masterID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getActiveCountAsync(int user_masterID) {
            this.getActiveCountAsync(user_masterID, null);
        }
        
        /// <remarks/>
        public void getActiveCountAsync(int user_masterID, object userState) {
            if ((this.getActiveCountOperationCompleted == null)) {
                this.getActiveCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetActiveCountOperationCompleted);
            }
            this.InvokeAsync("getActiveCount", new object[] {
                        user_masterID}, this.getActiveCountOperationCompleted, userState);
        }
        
        private void OngetActiveCountOperationCompleted(object arg) {
            if ((this.getActiveCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getActiveCountCompleted(this, new getActiveCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Addprocess_master", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Addprocess_master(int user_masterID, string processid, string processName, string procStartTime, string appname, string totalProcessorTime, string userProcessorTime, string StartInfo) {
            object[] results = this.Invoke("Addprocess_master", new object[] {
                        user_masterID,
                        processid,
                        processName,
                        procStartTime,
                        appname,
                        totalProcessorTime,
                        userProcessorTime,
                        StartInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Addprocess_masterAsync(int user_masterID, string processid, string processName, string procStartTime, string appname, string totalProcessorTime, string userProcessorTime, string StartInfo) {
            this.Addprocess_masterAsync(user_masterID, processid, processName, procStartTime, appname, totalProcessorTime, userProcessorTime, StartInfo, null);
        }
        
        /// <remarks/>
        public void Addprocess_masterAsync(int user_masterID, string processid, string processName, string procStartTime, string appname, string totalProcessorTime, string userProcessorTime, string StartInfo, object userState) {
            if ((this.Addprocess_masterOperationCompleted == null)) {
                this.Addprocess_masterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddprocess_masterOperationCompleted);
            }
            this.InvokeAsync("Addprocess_master", new object[] {
                        user_masterID,
                        processid,
                        processName,
                        procStartTime,
                        appname,
                        totalProcessorTime,
                        userProcessorTime,
                        StartInfo}, this.Addprocess_masterOperationCompleted, userState);
        }
        
        private void OnAddprocess_masterOperationCompleted(object arg) {
            if ((this.Addprocess_masterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Addprocess_masterCompleted(this, new Addprocess_masterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Addbrowser_history", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Addbrowser_history(int user_masterID, string browser_name, System.Data.DataTable dt) {
            object[] results = this.Invoke("Addbrowser_history", new object[] {
                        user_masterID,
                        browser_name,
                        dt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Addbrowser_historyAsync(int user_masterID, string browser_name, System.Data.DataTable dt) {
            this.Addbrowser_historyAsync(user_masterID, browser_name, dt, null);
        }
        
        /// <remarks/>
        public void Addbrowser_historyAsync(int user_masterID, string browser_name, System.Data.DataTable dt, object userState) {
            if ((this.Addbrowser_historyOperationCompleted == null)) {
                this.Addbrowser_historyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddbrowser_historyOperationCompleted);
            }
            this.InvokeAsync("Addbrowser_history", new object[] {
                        user_masterID,
                        browser_name,
                        dt}, this.Addbrowser_historyOperationCompleted, userState);
        }
        
        private void OnAddbrowser_historyOperationCompleted(object arg) {
            if ((this.Addbrowser_historyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Addbrowser_historyCompleted(this, new Addbrowser_historyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/convertImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string convertImage(int user_masterID, string imgtext) {
            object[] results = this.Invoke("convertImage", new object[] {
                        user_masterID,
                        imgtext});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void convertImageAsync(int user_masterID, string imgtext) {
            this.convertImageAsync(user_masterID, imgtext, null);
        }
        
        /// <remarks/>
        public void convertImageAsync(int user_masterID, string imgtext, object userState) {
            if ((this.convertImageOperationCompleted == null)) {
                this.convertImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertImageOperationCompleted);
            }
            this.InvokeAsync("convertImage", new object[] {
                        user_masterID,
                        imgtext}, this.convertImageOperationCompleted, userState);
        }
        
        private void OnconvertImageOperationCompleted(object arg) {
            if ((this.convertImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertImageCompleted(this, new convertImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertErrorlog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string insertErrorlog(int user_masterID, string mothod, string errortrace, string stack) {
            object[] results = this.Invoke("insertErrorlog", new object[] {
                        user_masterID,
                        mothod,
                        errortrace,
                        stack});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void insertErrorlogAsync(int user_masterID, string mothod, string errortrace, string stack) {
            this.insertErrorlogAsync(user_masterID, mothod, errortrace, stack, null);
        }
        
        /// <remarks/>
        public void insertErrorlogAsync(int user_masterID, string mothod, string errortrace, string stack, object userState) {
            if ((this.insertErrorlogOperationCompleted == null)) {
                this.insertErrorlogOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertErrorlogOperationCompleted);
            }
            this.InvokeAsync("insertErrorlog", new object[] {
                        user_masterID,
                        mothod,
                        errortrace,
                        stack}, this.insertErrorlogOperationCompleted, userState);
        }
        
        private void OninsertErrorlogOperationCompleted(object arg) {
            if ((this.insertErrorlogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertErrorlogCompleted(this, new insertErrorlogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void getActiveCountCompletedEventHandler(object sender, getActiveCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getActiveCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getActiveCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void Addprocess_masterCompletedEventHandler(object sender, Addprocess_masterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Addprocess_masterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Addprocess_masterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void Addbrowser_historyCompletedEventHandler(object sender, Addbrowser_historyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Addbrowser_historyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Addbrowser_historyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void convertImageCompletedEventHandler(object sender, convertImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void insertErrorlogCompletedEventHandler(object sender, insertErrorlogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertErrorlogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertErrorlogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591